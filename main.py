import telebot
from telebot import types
import yt_dlp
import os
import logging
import subprocess
import re
import glob

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –ø–∞–ø–∫–∏ downloads –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
script_dir = os.path.dirname(os.path.abspath(__file__))
output_dir = os.path.join(script_dir, "downloads")
logger.info("Autodeletings files into 'downloads' folder")

if os.path.exists(output_dir):
    for file in glob.glob(os.path.join(output_dir, "*")):
        try:
            os.remove(file)
            logger.info(f"Removed old file: {file}")
        except Exception as e:
            logger.warning(f"Failed to remove file during cleanup: {e}")
else:
    os.makedirs(output_dir, exist_ok=True)
    logger.info("Created downloads directory")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg
try:
    # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ FFmpeg
    ffmpeg_path = r'C:\\abc\\ffmpeg-2025-05-15-git-12b853530a-essentials_build\\bin\\ffmpeg'
    result = subprocess.run([ffmpeg_path, '-version'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

    if result.returncode == 0:
        logger.info("FFmpeg: –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        raise FileNotFoundError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏")

except FileNotFoundError as e:
    logger.error(f"FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ PATH: {e}")
    print("[–û—à–∏–±–∫–∞] FFmpeg –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã (PATH).")
    print("üëâ –°–∫–∞—á–∞–π —Å https://www.gyan.dev/ffmpeg/builds/ ")
    print("üëâ –†–∞—Å–ø–∞–∫—É–π –∞—Ä—Ö–∏–≤ –∏ –¥–æ–±–∞–≤—å –ø—É—Ç—å –∫ ffmpeg\\bin –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã")
    exit(1)

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ FFmpeg –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è yt-dlp
os.environ["PATH"] += os.pathsep + os.path.dirname(ffmpeg_path)
logger.info(f"Added FFmpeg path to environment: {ffmpeg_path}")

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ ===
TOKEN = '7999725213:AAE8DApPm0NapLJtXjj5eEJhUdUWYk5Olvo'  # –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
user_state = {}  # {chat_id: {"platform": "youtube", "awaiting_url": True}}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ===
markup_platforms = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup_platforms.add(types.KeyboardButton("Instagram"))
logging.info('All consts has are initialized')

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_state[chat_id] = {"platform": None, "awaiting_url": True}
    bot.send_message(chat_id, "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, —Å –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—á–µ—à—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:", reply_markup=markup_platforms)
    logger.info(f"User {chat_id} started")

# === –í—ã–±–æ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã ===
@bot.message_handler(func=lambda m: m.text in ["Instagram"])
def handle_platform_choice(message):
    chat_id = message.chat.id
    platform = message.text.lower()
    user_state[chat_id]["platform"] = platform
    user_state[chat_id]["awaiting_url"] = True
    bot.send_message(chat_id, f"–•–æ—Ä–æ—à–æ! –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ —Å {platform.capitalize()}.")
    logger.info(f"User {chat_id} selected platform: {platform}")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ URL –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
@bot.message_handler(func=lambda m: user_state.get(m.chat.id, {}).get("awaiting_url"))
def handle_video_url(message):
    chat_id = message.chat.id
    url = message.text.strip()
    bot.send_message(chat_id, "–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ... –ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ.")

    try:
        downloaded_file_path = None

        def hook(d):
            nonlocal downloaded_file_path
            if d['status'] == 'finished':
                downloaded_file_path = d['filename']

        ydl_opts = {
            'format': 'best[ext=mp4]',  # –ë–µ—Ä—ë–º —É–∂–µ –≥–æ—Ç–æ–≤–æ–µ .mp4 (–±–µ–∑ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ video/audio)
            'outtmpl': os.path.join(output_dir, '%(title)s.%(ext)s'),
            'retries': 5,
            'socket_timeout': 60,
            'ffmpeg_location': os.path.dirname(ffmpeg_path),
        }

        platform = user_state[chat_id].get("platform")
        if platform == "instagram":
            ydl_opts.update({
                'extractor_args': {'instagram': ['--username', 'public', '--password', 'none']},
            })

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)

        # –ü–æ–∏—Å–∫ —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        title = info.get('title', 'video')
        safe_title = re.sub(r'[<>:"/\\|?*]', '_', title)

        video_path = None
        for ext in ['.mp4', '.webm', '.mkv', '.avi']:
            test_path = os.path.join(output_dir, f"{safe_title}{ext}")
            if os.path.isfile(test_path):
                video_path = test_path
                break

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∏—â–µ–º –ª—é–±–æ–π .mp4 —Ñ–∞–π–ª
        if not video_path:
            video_files = glob.glob(os.path.join(output_dir, "*.mp4"))
            if video_files:
                video_path = video_files[0]
                logger.warning(f"Used fallback file detection: {video_path}")
            else:
                bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.")
                logger.error(f"No valid video file found for user {chat_id}")
                return

        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è
        final_path = os.path.join(output_dir, f"{chat_id}_video.mp4")
        os.rename(video_path, final_path)
        video_path = final_path

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = info.get('duration')
        if duration and duration > 60:
            bot.send_message(chat_id, f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ: {duration:.1f} —Å–µ–∫—É–Ω–¥. –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥.")
            logger.warning(f"Video too long ({duration:.1f}s) for user {chat_id}")
            os.remove(video_path)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä
        file_size_mb = os.path.getsize(video_path) / (1024 * 1024)
        if file_size_mb > 49:
            bot.send_message(chat_id, f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size_mb:.2f} –ú–ë).")
            logger.warning(f"Video too large ({file_size_mb:.2f} MB), skipped sending.")
            os.remove(video_path)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
        with open(video_path, 'rb') as video_file:
            bot.send_video(chat_id, video_file)
        bot.send_message(chat_id, "–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        logger.info(f"Sent {platform} video to user {chat_id}")

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        os.remove(video_path)

    except Exception as e:
        logger.error(f'Error downloading video for user {chat_id}: {e}', exc_info=True)
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {str(e)}")

    finally:
        if chat_id in user_state:
            del user_state[chat_id]

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    logger.info("Starting Telegram bot...")
    bot.polling(none_stop=True)